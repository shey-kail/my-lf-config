# lf doc - https://godoc.org/github.com/gokcehan/lf
# lfrc example - https://github.com/gokcehan/lf/blob/master/etc/lfrc.example

# ========== General settings ==========
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
# set icons
# set drawbox
set incsearch
set smartcase
set ignorecase
set anchorfind
set findlen 1
set tabstop 4
set info 'size'
set preview
set dircounts

# ========== Commands ==========

# Override the default open for file opening (binded to 'l' by default)
# Open the file according to mime-type, or open it with $EDITOR
cmd open &{{
  case $(file --mime-type "$(readlink -f $f)" -b) in
    text/*|application/json|inode/x-empty|application/octet-stream) lf -remote "send $id \$$EDITOR \$fx";;
    *) for f in $fx; do open $f > /dev/null 2> /dev/null & done;;
  esac
}}

# mkdir
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# dragon cmd (from https://github.com/nigo81/Lf-config)
cmd dragon %dragon -a -x $fx
cmd dragon-stay %dragon -a $fx
cmd dragon-individual %dragon $fx

# Create a directory with the selected items
cmd new-folder-with-selection ${{
  set -f
  printf "Directory name: "
  read newd
  mkdir -- "$newd"
  mv -- $fx "$newd"
}}

# chmod
cmd chmod ${{
  printf "\nMode Bits: "
  read ans
  for file in "$fx"
  do
    chmod $ans $file
  done
  lf -remote 'send reload'
}}

# extract archive
cmd extract ${{
  set -f
  case $f in
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
    *.tar.gz|*.tgz) tar xzvf $f;;
    *.tar.xz|*.txz) tar xJvf $f;;
    *.tar) tar xvf $f;;
    *.zip) unzip $f;;
    *.rar) unrar x $f;;
    *.7z) 7z x $f;;
    *) echo "Unsupported format";;
  esac
}}

# compress archive
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress archive(zip)
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# delete file(s)
cmd delete ${{
  set -f
  printf "\n$fx\n"
  printf "delete?[y/N]"
  read ans
  if [[ $ans == "y" ]]; then
    rm -rf $fx
  fi
}}

# create symlink relative to the current directory
cmd create_link_relative %{{
  set -- $(cat ~/.local/share/lf/files)
  mode="$1"
  shift
  if [ "$#" -lt 1 ]; then
      lf -remote "send $id echo no files to link"
      exit 0
  fi

  # create relative link
  ln -sr -t . -- "$@"

  rm ~/.local/share/lf/files
  lf -remote "send clear"
}}

# create symlink (fullpath)
cmd create_link_fullpath %{{
  set -- $(cat ~/.local/share/lf/files)
  mode="$1"
  shift
  if [ "$#" -lt 1 ]; then
      lf -remote "send $id echo no files to link"
      exit 0
  fi

  # create fullpath link
  fullpath=$(realpath "$@")
  ln -sr -t . -- $fullpath

  rm ~/.local/share/lf/files
  lf -remote "send clear"
}}

# move to trash
cmd trash !{{
  set -f
  printf "\nItems to be trashed:\n$fx\n\nTrash? [y/N]"
  read ans
  if [[ $ans == "y" ]]; then
    trash -F $fx && echo "Trash complete!"
  elif [[ $ans == "n" ]]; then
    echo "Canceled!"
  else
    echo "Failed! Use y to trash."
  fi
}}

cmd select-all :unselect; invert

# Bulk rename on selected files or all the non-hidden files in the current directory if no selection
cmd bulk-rename ${{
  old="$(mktemp)"
  new="$(mktemp)"
  if [ -n "$fs" ]; then
    fs="$(basename $fs)"
  else
    fs="$(ls)"
  fi
  printf '%s\n' "$fs" >"$old"
  printf '%s\n' "$fs" >"$new"
  $EDITOR "$new"
  [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
  paste "$old" "$new" | while IFS= read -r names; do
    src="$(printf '%s' "$names" | cut -f1)"
    dst="$(printf '%s' "$names" | cut -f2)"
    if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
        continue
    fi
    mv -- "$src" "$dst"
  done
  rm -- "$old" "$new"
  lf -remote "send $id unselect"
}}

# Copy the file names (including extension) of the selections separated by \n
cmd copy-filename ${{
  names="$(echo $fx | tr ' ' '\n' | xargs -I{} basename {})"
  echo $names | tr ' ' '\n' | pbcopy
}}

# Copy the absolute paths of selections separated by \n
cmd copy-absolute-path ${{
  echo $fx | tr ' ' '\n' | pbcopy
}}

# Select the file or directory via fzf
cmd fzf-select ${{
  IFS=' '
  exclude=$(cat $HOME/exclude | sed 's/^/--exclude /' | tr '\n' ' ')
  select=$(fd --hidden --follow $exclude | fzf) || true
  lf -remote "send $id select $select"
}}

# cd into the selected directory via fzf
cmd fzf-cd ${{
  IFS=' '
  exclude=$(cat $HOME/exclude | sed 's/^/--exclude /' | tr '\n' ' ')
  select=$(fd --type d --hidden --follow $exclude | fzf) || true
  lf -remote "send $id cd $select"
}}

# ========== Mappings ==========

# Remove some default key bindings
map d
map y
map r
map p
map w

# quit
map x quit
# map q cd_on_quit (this is implemented on .bashrc or .bash_alias, see https://github.com/gokcehan/lf/issues/785#issuecomment-1133989624 for more detail)

# show or hide hidden files
map <backspace2> set hidden!

# tab navigation
map <tab> :toggle;down

# copy, paste, and cut
map yy copy
map yn copy-filename
map yP copy-absolute-path
map pp paste
map pl create_link_relative
map pL create_link_fullpath
map dd cut

# execute shell commands in lf
map s shell

# delete file(s)
map dD delete
map dT trash

# list the size of each item in the current directory
map U !printf "\n";du -csh *

# fzf
map <c-f> fzf-select
map <c-j> fzf-cd

# give a name and then make a directory
map <c-n> push :mkdir<space>
map <a-n> new-folder-with-selection

# Navigate among the parent directories
map [ push hkl
map ] push hjl

# Rename
map A rename # at the very end
map I push A<c-f><c-k> # rename the extension
map a push A<c-u> # rename the filename
map <c-r> bulk-rename

# dragon
map dr dragon
map ds dragon-stay
map di dragon-individual
